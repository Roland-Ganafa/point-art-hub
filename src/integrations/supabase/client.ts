// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Import the connection monitor
import ConnectionMonitor from '../../utils/connectionMonitor';

// Supabase configuration
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Debug environment variables
if (typeof window !== 'undefined') {
  console.log("Supabase Client Configuration:");
  console.log("URL Available:", !!SUPABASE_URL);
  console.log("Key Available:", !!SUPABASE_PUBLISHABLE_KEY);
  
  if (SUPABASE_URL) {
    console.log("URL Format Check:", SUPABASE_URL.startsWith("https://") ? "Valid" : "Invalid");
    console.log("URL Length:", SUPABASE_URL.length);
  }
  
  if (SUPABASE_PUBLISHABLE_KEY) {
    console.log("Key Length:", SUPABASE_PUBLISHABLE_KEY.length);
  }
}

// Function to handle environment variable issues
const handleMissingEnvVars = () => {
  // Check if we have the required environment variables
  if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
    const errorMessage = 'Missing Supabase environment variables. Please check your .env file.';
    console.error(errorMessage);
    
    if (typeof window !== 'undefined') {
      // Display an error message for users
      document.addEventListener('DOMContentLoaded', () => {
        const rootElement = document.getElementById('root');
        if (rootElement) {
          rootElement.innerHTML = `
            <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; min-height: 100vh; padding: 1rem; text-align: center;">
              <h1 style="color: #e11d48; font-size: 1.5rem; margin-bottom: 1rem;">Configuration Error</h1>
              <p style="color: #374151; max-width: 28rem; margin-bottom: 1.5rem;">
                The application cannot connect to the database because environment variables are missing.
                Please contact the administrator to fix this issue.
              </p>
              <button onclick="window.location.href = '/auth'" style="background: #2563eb; color: white; font-weight: 500; padding: 0.5rem 1rem; border-radius: 0.375rem; border: none; cursor: pointer; margin-bottom: 1rem;">
                Go to Login Page
              </button>
              <button onclick="window.location.reload()" style="background: #4b5563; color: white; font-weight: 500; padding: 0.5rem 1rem; border-radius: 0.375rem; border: none; cursor: pointer;">
                Reload Page
              </button>
            </div>
          `;
        }
      });
    }
    
    // Throw an error to prevent creating an invalid client
    throw new Error(errorMessage);
  }
  
  return { url: SUPABASE_URL, key: SUPABASE_PUBLISHABLE_KEY };
};

// Get configuration - this will throw if env vars are missing
const { url, key } = handleMissingEnvVars();

// Create a custom storage handler with better error handling
const storage = {
  getItem: (key: string) => {
    try {
      if (typeof window !== 'undefined') {
        return localStorage.getItem(key);
      }
    } catch (error) {
      console.error('Error accessing localStorage:', error);
    }
    return null;
  },
  setItem: (key: string, value: string) => {
    try {
      if (typeof window !== 'undefined') {
        localStorage.setItem(key, value);
      }
    } catch (error) {
      console.error('Error writing to localStorage:', error);
    }
  },
  removeItem: (key: string) => {
    try {
      if (typeof window !== 'undefined') {
        localStorage.removeItem(key);
      }
    } catch (error) {
      console.error('Error removing from localStorage:', error);
    }
  },
};

// Create Supabase client with enhanced error handling and optimized connection
export const supabase = createClient<Database>(url as string, key as string, {
  auth: {
    storage: storage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    // Enhanced session-related options
    storageKey: 'point-art-hub-auth',
    debug: true,
  },
  global: {
    headers: {
      'X-Client-Info': 'point-art-hub/1.0',
      'X-Connection-Quality': 'high',
    },
  },
  db: {
    schema: 'public',
  },
  // Reduce timeout settings for faster feedback
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  }
});

// Offline detection and improved reconnection
if (typeof window !== 'undefined') {
  // Track online status for better recovery
  let wasOffline = false;

  window.addEventListener('offline', () => {
    console.log('Connection lost. Operating in offline mode');
    wasOffline = true;
  });
  
  window.addEventListener('online', () => {
    console.log('Connection restored. Refreshing authentication...');
    // Force refresh auth state when connection is restored
    if (wasOffline) {
      // Try to refresh multiple times with increasing delay if needed
      const refreshAttempts = [0, 1000, 3000];
      
      refreshAttempts.forEach((delay, index) => {
        setTimeout(() => {
          console.log(`Refresh attempt ${index + 1}/${refreshAttempts.length}`);
          supabase.auth.refreshSession()
            .then(() => console.log('Session refreshed successfully'))
            .catch(err => console.warn('Session refresh attempt failed:', err));
        }, delay);
      });
      
      wasOffline = false;
    }
  });

  // Also periodically check and refresh session
  setInterval(() => {
    if (navigator.onLine) {
      supabase.auth.getSession()
        .then(({ data }) => {
          if (data.session) {
            // Session exists, periodically refresh it
            supabase.auth.refreshSession()
              .catch(err => console.warn('Periodic session refresh failed:', err));
          }
        })
        .catch(err => console.warn('Session check failed:', err));
    }
  }, 5 * 60 * 1000); // Check every 5 minutes
}

// Debug - check if client is created properly
if (typeof window !== 'undefined') {
  if (supabase) {
    console.log("Supabase client created successfully");
    
    // Test the connection to Supabase with timeout handling
    (async () => {
      try {
        // Import connection monitor dynamically to avoid circular dependencies
        const ConnectionMonitor = (await import('../../utils/connectionMonitor')).default;
        const isConnected = await ConnectionMonitor.testSupabaseConnection();
        if (isConnected) {
          console.log("Supabase connection successful");
          // Clear any previous connection error
          localStorage.removeItem('supabase_connection_error');
        } else {
          console.error("Supabase connection test failed");
          localStorage.setItem('supabase_connection_error', JSON.stringify({ 
            timestamp: Date.now(),
            error: 'Connection test failed'
          }));
        }
      } catch (err) {
        console.error("Supabase connection test error:", err);
        localStorage.setItem('supabase_connection_error', JSON.stringify({ 
          timestamp: Date.now(),
          error: err instanceof Error ? err.message : 'Unknown error'
        }));
      }
    })();
  } else {
    console.error("Failed to create Supabase client");
  }
}